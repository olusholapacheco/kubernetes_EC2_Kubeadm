name: Deploy Kubernetes Cluster using Kubeadm and AWS EC2s

on:
  push:
    branches:
      - main

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      master_node_ip: ${{ steps.set-ips.outputs.master_node_ip }}
      worker_node_ips: ${{ steps.set-ips.outputs.worker_node_ips }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.11

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Initialize Terraform
      run: terraform init -backend-config="bucket=kubernetes-kubeadm-bucket" -backend-config="key=kubernetes-kubeadm-bucket-key/terraform.tfstate" -backend-config="region=${{ secrets.AWS_REGION }}" -backend-config="dynamodb_table=terraform-lock"

    - name: Apply Terraform
      id: apply
      run: terraform apply -auto-approve

    - name: Set master and worker node IPs
      id: set-ips
      run: |
        echo "MASTER_NODE_IP=$(terraform output -raw master_public_ip)" >> $GITHUB_ENV
        echo "WORKER_NODE_IPS=$(terraform output -json worker_public_ips)" >> $GITHUB_ENV
      outputs:
        master_node_ip: ${{ steps.set-ips.outputs.master_node_ip }}
        worker_node_ips: ${{ steps.set-ips.outputs.worker_node_ips }}

  setup-master-node:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure

    steps:
    - name: Wait for master node to be ready
      run: |
        while ! ssh -o "StrictHostKeyChecking=no" ubuntu@${{ needs.deploy-infrastructure.outputs.master_node_ip }} "kubectl get nodes | grep Ready"; do
          echo "Waiting for master node to be ready..."
          sleep 10
        done

    - name: Run master node script
      run: |
        ssh -o "StrictHostKeyChecking=no" ubuntu@${{ needs.deploy-infrastructure.outputs.master_node_ip }} "sudo bash /root/master.sh"

  setup-worker-node:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure

    steps:
    - name: Run worker node script on all workers
      run: |
        WORKER_NODE_IPS=${{ needs.deploy-infrastructure.outputs.worker_node_ips }}
        for ip in $(echo $WORKER_NODE_IPS | jq -r '.[]'); do
          ssh -o "StrictHostKeyChecking=no" ubuntu@$ip "sudo bash /root/workers.sh"
        done
